#!/usr/bin/env ruby
# frozen_string_literal: true

require "bundler/setup"
require "ettin/config_files"
require "fileutils"
require "optparse"

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Creates the standard, empty config files starting from the given " \
    "path.\nUsage: ettin STARTPATH"

  opts.on("-p", "--path STARTPATH",
    "The root under which the files will be created.") do |p|
      options[:start_path] = p
    end

  opts.on("-v", "--[no-]verbose", "Print paths created") do |v|
    options[:verbose] = v
  end

  options[:compat] = false
  opts.on("-c", "--[no-]compat",
    "Create extra config files for compatibility with railsconfig gem.") do |c|
      options[:compat] = c
    end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end

parser.parse!

unless options[:start_path]
  puts "The --path option is required"
  puts parser
  exit 1
end

files = ["development", "production", "test"]
  .map {|env| Ettin::ConfigFiles.for(root: options[:start_path], env: env) }
  .flatten
  .sort.reverse
  .uniq

unless options[:compat]
  files.reject! {|path| path.dirname.basename.to_s == "environments" }
end

files.each do |path|
  path.parent.mkpath
  FileUtils.touch path.to_s
  puts path if options[:verbose]
end

puts "\nAdding .local.yml files to .gitignore" if options[:verbose]
`echo "\n# Ignore local configuration files" >> .gitignore`
files
  .select {|path| path.basename.to_s.include?("local") }
  .each {|path| `echo "#{path}" >> .gitignore` }

puts "" if options[:verbose]
